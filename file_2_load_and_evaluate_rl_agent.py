# -*- coding: utf-8 -*-
"""File_2_Load_and_evaluate_RL_agent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z83Dv4V7mX4s_F5qk3jtAQwYDPe-4OQO
"""

# Prior to executing this file, File_1 must be run in order to generate a csv input of predictions.
# This input file is being read here, and the predictions are fed into the RL strategy.

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x

# Install tensortrade
pip install git+https://github.com/notadamking/tensortrade.git#egg=tensortrade[tf,tensorforce,baselines,ccxt,ta,fbm] -U

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Commented out IPython magic to ensure Python compatibility.
# Connect to Google drive, to upload the data
from google.colab import drive
# drive.mount('/content/gdrive')
# # %cd /content/gdrive/My\ Drive/Colab\ Notebooks/data
#
# # Specify path to the Agent files
# path = '/content/gdrive/My Drive/Colab Notebooks/data/'

data = pd.read_csv(r'C:\Users\ketap\Downloads\drive-download-20200322T222027Z-001\BTC_data_and_forecast.csv')
data

# Save actual data into 'price_history' and predicted data into 'data'
price_history = data[['date', 'open', 'high', 'low', 'close', 'volume']]  # chart data
data.drop(columns=['date', 'open', 'high', 'low', 'close', 'volume'], inplace=True)

from tensortrade.exchanges import Exchange
from tensortrade.exchanges.services.execution.simulated import execute_order
from tensortrade.data import Stream, DataFeed, Module
from tensortrade.instruments import USD, BTC
from tensortrade.wallets import Wallet, Portfolio
from tensortrade.agents import A2CAgent

# Instantiate the portfolio and feed (feed consists only of BTC price predictions)
coinbase = Exchange("coinbase", service=execute_order)(
    Stream("USD-BTC", price_history['close'].tolist())
)

portfolio = Portfolio(USD, [
    Wallet(coinbase, 10000 * USD), 
    Wallet(coinbase, 10 * BTC),
])

with Module("coinbase") as coinbase_ns:
    nodes = [Stream(name, data[name].tolist()) for name in data.columns]

feed = DataFeed([coinbase_ns])

# Initialize the trading environment
from tensortrade.environments import TradingEnvironment
env_1 = TradingEnvironment(
    feed=feed,
    portfolio=portfolio,
    action_scheme='managed-risk',
    reward_scheme='risk-adjusted',
    window_size=4 
)

# Load the agent from the external (pre-trained) files
# Training parameters: window_size=4, n_episodes=7, n_steps=2000
from tensortrade.agents import A2CAgent

agent = A2CAgent(env_1)
agent.restore(path=path,
              actor_filename=r'C:\Users\ketap\Downloads\drive-download-20200322T222027Z-001\A2C_actor_7.hdf5',
              critic_filename=r'C:\Users\ketap\Downloads\drive-download-20200322T222027Z-001\A2C_critic_7.hdf5')

# Make agent take a set of actions
action = agent.env.action_space.sample()
done = False
n_steps = len(data)
step = 0
total_reward = 0
while not done and (step < n_steps):
  state, reward, done, info = agent.env.step(action)
  action = agent.get_action(state)
  print('step:', step, '-- action:', action, reward, done)
  total_reward += reward
  step += 1
print("Mean reward:", total_reward/(step+1))

# Visualize the portfolio performance
env_1.portfolio.performance.plot(figsize=(16,10))

# Visualize changes in net worth only
env_1.portfolio.performance.net_worth.plot(figsize=(16,10))

env_1.portfolio.performance
